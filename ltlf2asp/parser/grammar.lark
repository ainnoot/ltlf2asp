start: ltlf_formula

?ltlf_formula:            ltlf_equivalence
?ltlf_equivalence:        ltlf_implication (EQUIVALENCE ltlf_implication)*
?ltlf_implication:        ltlf_or (IMPLY ltlf_or)*
?ltlf_or:                 ltlf_and (OR ltlf_and)*
?ltlf_and:                ltlf_until (AND ltlf_until)*
?ltlf_until:              ltlf_weak_until (UNTIL ltlf_weak_until)*
?ltlf_weak_until:         ltlf_release (WEAK_UNTIL ltlf_release)*
?ltlf_release:            ltlf_strong_release (RELEASE ltlf_strong_release)*
?ltlf_strong_release:     ltlf_unaryop (STRONG_RELEASE ltlf_unaryop)*

?ltlf_unaryop:     ltlf_always
             |     ltlf_eventually
             |     ltlf_next
             |     ltlf_weak_next
             |     ltlf_not
             |     ltlf_wrapped

?ltlf_always:      ALWAYS ltlf_unaryop
?ltlf_eventually:  EVENTUALLY ltlf_unaryop
?ltlf_next:        NEXT ltlf_unaryop
?ltlf_weak_next:   WEAK_NEXT ltlf_unaryop
?ltlf_not:         NOT ltlf_unaryop
?ltlf_wrapped:     ltlf_atom
             |     LSEPARATOR ltlf_formula RSEPARATOR

ltlf_atom: symbol

symbol: SYMBOL | SQUOTE FREE_SYMBOL SQUOTE | DQUOTE FREE_SYMBOL DQUOTE


UNTIL.2: /U(?=[^a-zA-Z]|$)/
RELEASE.2: /R(?=[^a-zA-Z]|$)/
ALWAYS.2: /G(?=[^a-zA-Z]|$)/
EVENTUALLY.2: /F(?=[^a-zA-Z]|$)/
NEXT.2: /X(?=[^a-zA-Z]|$)/
WEAK_NEXT.2: /WX(?=[^a-zA-Z]|$)/
WEAK_UNTIL.2: /W(?=[^a-zA-Z]|$)/
STRONG_RELEASE.2: /M(?=[^a-zA-Z]|$)/
NOT: "!" | "~"
OR: "|" | "||"
AND: "&" | "&&"
EQUIVALENCE: "=" | "<->" | "<=>"
IMPLY: "->" | "=>"
LSEPARATOR: "("
RSEPARATOR: ")"
SQUOTE: "'"
DQUOTE: "\""

// Symbols cannot contain uppercase letters, because these are reserved
SYMBOL: /[a-zA-Z0-9_\?]+/
FREE_SYMBOL: /[A-Za-z0-9_\-\?]+/
%ignore /\s+/
