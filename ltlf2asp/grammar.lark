start: ltlf_formula

?ltlf_formula:            ltlf_equivalence
?ltlf_equivalence:        ltlf_implication (EQUIVALENCE ltlf_implication)*
?ltlf_implication:        ltlf_or (IMPLY ltlf_or)*
?ltlf_or:                 ltlf_and (OR ltlf_and)*
?ltlf_and:                ltlf_until (AND ltlf_until)*
?ltlf_until:              ltlf_weak_until (UNTIL ltlf_weak_until)*
?ltlf_weak_until:         ltlf_release (WEAK_UNTIL ltlf_release)*
?ltlf_release:            ltlf_strong_release (RELEASE ltlf_strong_release)*
?ltlf_strong_release:     ltlf_unaryop (STRONG_RELEASE ltlf_unaryop)*

?ltlf_unaryop:     ltlf_always
             |     ltlf_eventually
             |     ltlf_next
             |     ltlf_weak_next
             |     ltlf_not
             |     ltlf_wrapped

?ltlf_always:      ALWAYS ltlf_unaryop
?ltlf_eventually:  EVENTUALLY ltlf_unaryop
?ltlf_next:        NEXT ltlf_unaryop
?ltlf_weak_next:   WEAK_NEXT ltlf_unaryop
?ltlf_not:         NOT ltlf_unaryop
?ltlf_wrapped:     ltlf_atom
             |     LSEPARATOR ltlf_formula RSEPARATOR

ltlf_true: TRUE
ltlf_false: FALSE
ltlf_last: LAST
symbol: SYMBOL | QUOTE SYMBOL QUOTE

ltlf_atom: ltlf_true | ltlf_false | ltlf_last | symbol


UNTIL: "U"
WEAK_UNTIL: "W"
RELEASE: "R"
STRONG_RELEASE: "M"
ALWAYS: "G"
EVENTUALLY: "F"
NEXT: "X"
WEAK_NEXT: "WX"
LAST: "Last" | "End" | "last" | "end" | "END" | "LAST"
TRUE: "True" | "true" | "TRUE"
FALSE: "False" | "false" | "FALSE"
NOT: "!" | "~"
OR: "|" | "||"
AND: "&" | "&&"
EQUIVALENCE: "=" | "<->" | "<=>"
IMPLY: "->" | "=>"
LSEPARATOR: "("
RSEPARATOR: ")"
QUOTE: "\""

// Symbols cannot contain uppercase letters, because these are reserved
SYMBOL: /[a-zA-Z]+[a-zA-Z0-9\-\_\?]*/

%ignore /\s+/
