#! /usr/bin python3

import re
import sys
from subprocess import check_output
import sys

KNOWN_TYPES = (
    'fix',
    'feat',
    'build',
    'chore',
    'ci',
    'docs',
    'style',
    'refactor',
    'perf',
    'test'
)

def validate_commit_message(message):
    # Define the conventional commit pattern
    type_re = r"^([a-z]+[a-z_-]+)"
    scope_re = r"(\([a-z]+[a-z_-]+\))?"
    danger_re = r"(\!)?"
    commit_re = r"(.+)$"
    pattern = r'^{type}{scope}{danger}\: {msg}$'.format(type=type_re, scope=scope_re, danger=danger_re, msg=commit_re)

    match = re.match(pattern, message)
    if not match:
        print("WRONG_FORMAT")
        sys.exit(1)

    type_, scope_, is_danger, msg = match.groups()
    if type_ not in KNOWN_TYPES:
        print("UNKNOWN_TYPE")
        sys.exit(1)

    if msg != msg.strip():
        print("TRAILING_SPACES")
        sys.exit(1)

    if is_danger is not None and scope_ is None:
        print("NO_SCOPE_ON_BREAKING_CHANGE")
        sys.exit(1)

    if is_danger is not None and len(msg.strip()) < 15:
        print("SHORT_MESSAGE_ON_BREAKING_CHANGE")
        sys.exit(1)


def main():
    commit_msg = sys.argv[1]
    validate_commit_message(commit_msg)

if __name__ == "__main__":
    main()
